{"version":3,"sources":["../inlined/directive/tap.directive.ts"],"names":[],"mappings":"AAAA,6HAAC;AAED,OAAO,EAAE,SAAA,EAAW,UAAA,EAAY,YAAA,EAAc,KAAA,EAAe,MAAA,EAAQ,SAAA,EAAU,MAAO,eAAA,CAAgB;AACtG,OAAO,EAAE,cAAA,EAAe,MAAO,4BAAA,CAA6B;AAK5D;IAKE,sBAAoB,OAAuB,EAAU,EAAc,EAAU,QAAmB;QAA5E,YAAO,GAAP,OAAO,CAAgB;QAAU,OAAE,GAAF,EAAE,CAAY;QAAU,aAAQ,GAAR,QAAQ,CAAW;QAF/F,aAAQ,GAAG,IAAI,YAAY,EAAE,CAAC;IAG/B,CAAC;IAED,+BAAQ,GAAR;QACE,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED,0CAA0C;IAC1C,kCAAW,GAAX;QAAA,iBAsBC;QApBC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;YACjC,EAAE,CAAC,CAAC,OAAO,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC;gBAElC,MAAM,KAAK,CAAC,4DAA4D,CAAC,CAAC;YAC5E,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,8BAA8B;gBAC9B,EAAE,CAAC,CAAC,OAAO,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC;oBAClC,IAAM,EAAE,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC;oBAC7C,EAAE,CAAC,EAAE,CAAC,KAAK,EAAE;wBACX,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBAC3B,CAAC,CAAC,CAAC;gBACL,CAAC;YACH,CAAC;QACH,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,6BAA6B;YAC7B,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE,SAAS,EAAE;gBAC1D,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC3B,CAAC,CAAC,CAAC;QACL,CAAC;IAEH,CAAC;IAgBH,mBAAC;AAAD,CAnDA,AAmDC;;AAfM,uBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EAAE,OAAO;aAClB,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,2BAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,cAAc,GAAG;IACxB,EAAC,IAAI,EAAE,UAAU,GAAG;IACpB,EAAC,IAAI,EAAE,SAAS,GAAG;CAClB,EAJ6F,CAI7F,CAAC;AACK,2BAAc,GAA2C;IAChE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IACzB,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;CAC9B,CAAC","file":"tap.directive.js","sourceRoot":"","sourcesContent":["/** This directive enable tap if HammerJS is loaded, otherwise it uses the normal click event (useful for thumbnail click) */\n\nimport { Directive, ElementRef, EventEmitter, Input, OnInit, Output, Renderer2 } from '@angular/core';\nimport { GalleryService } from '../service/gallery.service';\n\ndeclare const Hammer: any;\n\n\nexport class TapDirective implements OnInit {\n\n   tap;\n   tapClick = new EventEmitter();\n\n  constructor(private gallery: GalleryService, private el: ElementRef, private renderer: Renderer2) {\n  }\n\n  ngOnInit() {\n    this.setTapEvent();\n  }\n\n  /** Enable gestures if hammer is loaded */\n  setTapEvent() {\n\n    if (this.gallery.config.gestures) {\n      if (typeof Hammer === 'undefined') {\n\n        throw Error('[NgGallery]: HammerJS is undefined, make sure it is loaded');\n      } else {\n        /** Use tap for click event */\n        if (typeof Hammer !== 'undefined') {\n          const mc = new Hammer(this.el.nativeElement);\n          mc.on('tap', () => {\n            this.tapClick.emit(null);\n          });\n        }\n      }\n    } else {\n      /** Use normal click event */\n      this.renderer.setProperty(this.el.nativeElement, 'onclick', () => {\n        this.tapClick.emit(null);\n      });\n    }\n\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[tap]'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: GalleryService, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'tap': [{ type: Input },],\n'tapClick': [{ type: Output },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
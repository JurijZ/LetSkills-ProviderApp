{"version":3,"sources":["../inlined/directive/gallery.directive.ts"],"names":[],"mappings":"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","file":"gallery.directive.js","sourceRoot":"","sourcesContent":["import { Directive, ElementRef, Renderer2, Input, OnInit } from '@angular/core';\nimport { GalleryService } from '../service/gallery.service';\nimport { GalleryImage } from '../service/gallery.state';\n\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/fromEvent';\nimport 'rxjs/add/observable/from';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/finally';\n\n\nexport class GalleryDirective implements OnInit {\n\n  // A flag to check if content has changed\n  content;\n\n   gallerize;\n\n  constructor(public el: ElementRef, public renderer: Renderer2, public gallery: GalleryService) {\n  }\n\n  ngOnInit() {\n\n    /** Listen for InnerHtml changes */\n    Observable.fromEvent(this.el.nativeElement, 'DOMSubtreeModified')\n      .subscribe(() => {\n        // skip if content is the same\n        if (this.content === this.el.nativeElement.innerText) {\n          return;\n        }\n        else {\n          this.content = this.el.nativeElement.innerText;\n        }\n\n        const images: GalleryImage[] = [];\n        const classes = (this.gallerize) ? this.gallerize.split(' ').map((className) => '.' + className) : '';\n\n        // get all img elements from content\n        const imageElements = this.el.nativeElement.querySelectorAll(`img${classes}`);\n\n        if (imageElements) {\n          Observable.from(imageElements).map((img: HTMLImageElement, i) => {\n            // add click event to the images\n            this.renderer.setStyle(img, 'cursor', 'pointer');\n            this.renderer.setProperty(img, 'onclick', () => {\n              this.gallery.set(i);\n            });\n\n            // create an image item\n            images.push({\n              src: img.src,\n              text: img.alt\n            });\n          })\n          .finally(() => this.gallery.load(images))\n          .subscribe();\n\n        }\n      });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[gallerize]'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: GalleryService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'gallerize': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
{"version":3,"sources":["../inlined/directive/lazy.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,UAAU,EACV,KAAK,EACL,MAAM,EACN,YAAY,EACZ,SAAS,EACV,MAAM,eAAA,CAAgB;AAEvB,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAC7C,OAAO,EAAE,OAAA,EAAQ,MAAO,cAAA,CAAe;AACvC,oCAAoC;AAGpC;IAYE,uBAAoB,EAAc,EAAU,QAAmB;QAA/D,iBAYC;QAZmB,OAAE,GAAF,EAAE,CAAY;QAAU,aAAQ,GAAR,QAAQ,CAAW;QAL/D,iDAAiD;QACjD,eAAU,GAAG,IAAI,OAAO,EAAW,CAAC;QAEnC,aAAQ,GAAG,IAAI,YAAY,CAAU,KAAK,CAAC,CAAC;QAI3C,mGAAmG;QACnG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,UAAC,IAAI,IAAK,OAAA,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,EAAnB,CAAmB,CAAC;aACrD,SAAS,CAAC,UAAC,GAAG;YACb,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACR,KAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAI,CAAC,EAAE,CAAC,aAAa,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;gBAC7D,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YAC1B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC5B,CAAC;QACH,CAAC,CAAC,CAAC;IACP,CAAC;IArBA,sBAAI,oCAAS;QADd,eAAe;aACd,UAAc,SAAS;YACtB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAC3B,CAAC;;;OAAA;IAqBD,gCAAQ,GAAR,UAAS,SAAS;QAAlB,iBAaC;QAZC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC5B,IAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC/C,GAAG,CAAC,GAAG,GAAG,SAAS,CAAC;QAEpB,GAAG,CAAC,MAAM,GAAG;YACX,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAClC,CAAC,CAAC;QAEF,GAAG,CAAC,OAAO,GAAG,UAAA,GAAG;YACf,OAAO,CAAC,KAAK,CAAC,yBAAyB,EAAE,GAAG,CAAC,CAAC;YAC9C,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC9B,CAAC,CAAC;IACJ,CAAC;IAgBH,oBAAC;AAAD,CAvDA,AAuDC;;AAdM,wBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EAAE,aAAa;aACxB,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,4BAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,UAAU,GAAG;IACpB,EAAC,IAAI,EAAE,SAAS,GAAG;CAClB,EAH6F,CAG7F,CAAC;AACK,4BAAc,GAA2C;IAChE,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,WAAW,EAAG,EAAE,EAAE;IACtD,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;CAC9B,CAAC","file":"lazy.directive.js","sourceRoot":"","sourcesContent":["import {\n  Directive,\n  ElementRef,\n  Input,\n  Output,\n  EventEmitter,\n  Renderer2\n} from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n// import 'rxjs/add/operator/delay';\n\n\nexport class LazyDirective {\n\n  // Image source\n   set lazyImage(imagePath) {\n    this.getImage(imagePath);\n  }\n\n  /** A subject to emit only last selected image */\n  lazyWorker = new Subject<boolean>();\n\n   lazyLoad = new EventEmitter<boolean>(false);\n\n  constructor(private el: ElementRef, private renderer: Renderer2) {\n\n    // this.lazyTest.switchMap((done) => (done) ? Observable.of(done).delay(1000) : Observable.of(done)\n    this.lazyWorker.switchMap((done) => Observable.of(done))\n      .subscribe((img) => {\n        if (img) {\n          this.renderer.setProperty(this.el.nativeElement, 'src', img);\n          this.lazyLoad.emit(true)\n        } else {\n          this.lazyLoad.emit(false);\n        }\n      });\n  }\n\n  getImage(imagePath) {\n    this.lazyWorker.next(false);\n    const img = this.renderer.createElement('img');\n    img.src = imagePath;\n\n    img.onload = () => {\n      this.lazyWorker.next(imagePath);\n    };\n\n    img.onerror = err => {\n      console.error('[GalleryLazyDirective]:', err);\n      this.lazyWorker.next(false);\n    };\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[lazyImage]'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'lazyImage': [{ type: Input, args: ['lazyImage', ] },],\n'lazyLoad': [{ type: Output },],\n};\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
{"version":3,"sources":["../inlined/service/gallery.service.ts"],"names":[],"mappings":"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","file":"gallery.service.js","sourceRoot":"","sourcesContent":["import { Injectable, Optional } from '@angular/core';\n\nimport { GalleryState, GalleryImage } from './gallery.state';\nimport { GalleryConfig } from '../config/gallery.config';\nimport { defaultState, defaultConfig } from '../config/gallery.default';\n\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/observable/interval';\nimport 'rxjs/add/operator/switchMap';\nimport 'rxjs/add/operator/finally';\nimport 'rxjs/add/operator/take';\nimport 'rxjs/add/operator/takeWhile';\nimport 'rxjs/add/operator/do';\n\n\nexport class GalleryService {\n\n  /** Gallery state */\n  state: BehaviorSubject<GalleryState>;\n  /** Gallery config */\n  config: GalleryConfig = defaultConfig;\n  /** Gallery slide show player */\n  player: Subject<number>;\n\n  constructor(  config: GalleryConfig) {\n\n    /** Initialize the state */\n    this.state = new BehaviorSubject<GalleryState>(defaultState);\n    /** Initialize the config */\n    this.config = Object.assign({}, defaultConfig, config);\n\n    /** Initialize the player for play/pause commands */\n    this.player = new Subject();\n    this.player.switchMap((interval) => (interval) ? this.playerEngine(interval) : Observable.of(null)).subscribe();\n  }\n\n  /** Load images and reset the state */\n  load(images: GalleryImage[]) {\n\n    this.state.next({\n      images: images,\n      currIndex: 0,\n      hasNext: images.length > 1,\n      hasPrev: false,\n      active: false\n    });\n  }\n\n  /** Set current image and update the state */\n  set(index: number) {\n    const state = this.state.getValue();\n\n    this.state.next(Object.assign({}, state, {\n      prevIndex: state.currIndex,\n      currIndex: index,\n      hasNext: index < state.images.length - 1,\n      hasPrev: index > 0,\n      active: true\n    }));\n  }\n\n  /** Go to next image and update the state */\n  next() {\n    const state = this.state.getValue();\n\n    if (state.hasNext) {\n      const index = state.currIndex + 1;\n      this.set(index);\n    } else {\n      this.set(0);\n    }\n  }\n\n  /** Go to previous image and update the state */\n  prev() {\n    const state = this.state.getValue();\n\n    if (state.hasPrev) {\n      const index = state.currIndex - 1;\n      this.set(index);\n    } else {\n      this.set(state.images.length - 1);\n    }\n  }\n\n  /** Close gallery modal if open */\n  close() {\n    const state = this.state.getValue();\n\n    this.state.next(Object.assign({}, state, {\n      active: false,\n      play: false\n    }));\n    this.stop();\n  }\n\n  /** Reset gallery with initial state */\n  reset() {\n    this.state.next(defaultState);\n    this.stop();\n  }\n\n  /** Play slide show */\n  play(interval?) {\n    const speed = interval || this.config.player.speed || 2000;\n\n    const state = this.state.getValue();\n    /** Open and play the gallery, 'active' opens gallery modal */\n    this.state.next(Object.assign({}, state, { play: true, active: true }));\n    this.player.next(speed);\n  }\n\n  /** End slide show */\n  stop() {\n    this.player.next(0);\n  }\n\n  playerEngine(interval?) {\n\n    return Observable.interval(interval)\n      .takeWhile(() => this.state.getValue().play)\n      .do(() => {\n        this.next();\n      })\n      .finally(() => {\n        this.state.next(Object.assign({}, this.state.getValue(), { play: false }));\n      });\n\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, ]},\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
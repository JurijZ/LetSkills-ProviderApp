{"version":3,"file":"angular-auth-oidc-client.umd.min.js","sources":["../../src/services/oidc.security.service.ts","../../src/modules/auth.module.ts","../../src/modules/auth.configuration.ts","../../src/services/oidc.security.storage.ts","../../src/services/oidc.security.common.ts","../../src/services/oidc.security.validation.ts","../../src/services/auth.well-known-endpoints.ts","../../src/services/oidc.security.check-session.ts","../../src/services/oidc.security.silent-renew.ts","../../src/services/oidc.security.user-service.ts","../../src/services/authorization-result.enum.ts"],"sourcesContent":["import { PLATFORM_ID, Inject } from '@angular/core';\r\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\r\nimport { Injectable, EventEmitter, Output } from '@angular/core';\r\nimport { Http, Response, URLSearchParams } from '@angular/http';\r\nimport'rxjs/add/operator/map';\r\nimport'rxjs/add/operator/catch';\r\nimport { Observable } from 'rxjs/Rx';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Router } from '@angular/router';\r\nimport { AuthConfiguration, OpenIDImplicitFlowConfiguration } from '../modules/auth.configuration';\r\nimport { OidcSecurityValidation } from './oidc.security.validation';\r\nimport { OidcSecurityCheckSession } from './oidc.security.check-session';\r\nimport { OidcSecuritySilentRenew } from './oidc.security.silent-renew';\r\nimport { OidcSecurityUserService } from './oidc.security.user-service';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\nimport { AuthWellKnownEndpoints } from './auth.well-known-endpoints';\r\n\r\nimport { JwtKeys } from './jwtkeys';\r\nimport { AuthorizationResult } from './authorization-result.enum';\nexport class OidcSecurityService {\r\n\r\n\t onModuleSetup: EventEmitter<any> = new EventEmitter<any>(true);\r\n\t onAuthorizationResult: EventEmitter<AuthorizationResult> = new EventEmitter<AuthorizationResult>(true);\r\n\r\n    checkSessionChanged: boolean;\r\n    moduleSetup = false;\nprivate _isAuthorized = new BehaviorSubject<boolean>(false);\nprivate _isAuthorizedValue: boolean;\nprivate _userData = new BehaviorSubject<any>('');\nprivate _userDataValue: boolean;\nprivate oidcSecurityValidation: OidcSecurityValidation;\nprivate errorMessage: string;\nprivate jwtKeys: JwtKeys;\nprivate authWellKnownEndpointsLoaded = false;\n/**\n * @param {?} platformId\n * @param {?} http\n * @param {?} authConfiguration\n * @param {?} router\n * @param {?} oidcSecurityCheckSession\n * @param {?} oidcSecuritySilentRenew\n * @param {?} oidcSecurityUserService\n * @param {?} oidcSecurityCommon\n * @param {?} authWellKnownEndpoints\n */\nconstructor(\nprivate platformId: Object,\nprivate http: Http,\nprivate authConfiguration: AuthConfiguration,\nprivate router: Router,\nprivate oidcSecurityCheckSession: OidcSecurityCheckSession,\nprivate oidcSecuritySilentRenew: OidcSecuritySilentRenew,\nprivate oidcSecurityUserService: OidcSecurityUserService,\nprivate oidcSecurityCommon: OidcSecurityCommon,\nprivate authWellKnownEndpoints: AuthWellKnownEndpoints\r\n    ) {\r\n    }\n/**\n * @param {?} openIDImplicitFlowConfiguration\n * @return {?}\n */\nsetupModule(openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration): void {\r\n\r\n        this.authConfiguration.init(openIDImplicitFlowConfiguration);\r\n        this.oidcSecurityValidation = new OidcSecurityValidation(this.oidcSecurityCommon);\r\n\r\n        this.oidcSecurityCheckSession.onCheckSessionChanged.subscribe(() => { this.onCheckSessionChanged(); });\r\n        this.authWellKnownEndpoints.onWellKnownEndpointsLoaded.subscribe(() => { this.onWellKnownEndpointsLoaded(); });\r\n\r\n        this.oidcSecurityCommon.setupModule();\r\n\r\n        if (this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_user_data) !== '') {\r\n            this.setUserData(this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_user_data));\r\n        }\r\n\r\n        if (this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_is_authorized) !== '') {\r\n            this.setIsAuthorized(this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_is_authorized));\r\n        }\r\n\r\n        this.oidcSecurityCommon.logDebug('STS server: ' + this.authConfiguration.stsServer);\r\n\r\n        if (isPlatformBrowser(this.platformId)) {\r\n            // Client only code.\r\n            this.authWellKnownEndpoints.setupModule();\r\n\r\n            if (this.authConfiguration.silent_renew) {\r\n                this.oidcSecuritySilentRenew.initRenew();\r\n            }\r\n\r\n            if (this.authConfiguration.start_checksession) {\r\n                this.oidcSecurityCheckSession.init().subscribe(() => {\r\n                    this.oidcSecurityCheckSession.pollServerSession(this.authConfiguration.client_id);\r\n                });\r\n            }\r\n        }\r\n\r\n        this.moduleSetup = true;\r\n        this.onModuleSetup.emit();\r\n    }\n/**\n * @return {?}\n */\ngetUserData(): Observable<any> {\r\n        return this._userData.asObservable();\r\n    }\n/**\n * @param {?} userData\n * @return {?}\n */\nprivate setUserData(userData: any): void {\r\n        this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_user_data, userData);\r\n        this._userData.next(userData);\r\n    }\n/**\n * @return {?}\n */\ngetIsAuthorized(): Observable<boolean> {\r\n        return this._isAuthorized.asObservable();\r\n    }\n/**\n * @param {?} isAuthorized\n * @return {?}\n */\nprivate setIsAuthorized(isAuthorized: boolean): void {\r\n        this._isAuthorizedValue = isAuthorized;\r\n        this._isAuthorized.next(isAuthorized);\r\n    }\n/**\n * @return {?}\n */\ngetToken(): any {\r\n        if (!this._isAuthorizedValue) {\r\n            return '';\r\n        }\r\n\r\n        let /** @type {?} */ token = this.oidcSecurityCommon.getAccessToken();\r\n        return decodeURIComponent(token);\r\n    }\n/**\n * @return {?}\n */\ngetIdToken(): any {\r\n        if (!this._isAuthorizedValue) {\r\n            return '';\r\n        }\r\n\r\n        let /** @type {?} */ token = this.oidcSecurityCommon.getIdToken();\r\n        return decodeURIComponent(token);\r\n    }\n/**\n * @param {?=} encode\n * @return {?}\n */\ngetPayloadFromIdToken(encode = false): any {\r\n        const /** @type {?} */ token = this.getIdToken();\r\n        return this.oidcSecurityValidation.getPayloadFromToken(token, encode);\r\n    }\n/**\n * @param {?} state\n * @return {?}\n */\nsetState(state: string): void {\r\n        this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_auth_state_control, state);\r\n    }\n/**\n * @return {?}\n */\ngetState(): string {\r\n        return this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_auth_state_control);\r\n    }\n/**\n * @param {?} params\n * @return {?}\n */\nsetCustomRequestParameters(params: { [key: string]: string | number | boolean }) {\r\n        this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_custom_request_params, params);\r\n    }\n/**\n * @return {?}\n */\nauthorize() {\r\n\r\n        let /** @type {?} */ data = this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_well_known_endpoints);\r\n        if (data && data !== '') {\r\n            this.authWellKnownEndpointsLoaded = true;\r\n        }\r\n\r\n        if (!this.authWellKnownEndpointsLoaded) {\r\n            this.oidcSecurityCommon.logError('Well known endpoints must be loaded before user can login!')\r\n            return;\r\n        }\r\n\r\n        if (!this.oidcSecurityValidation.config_validate_response_type(this.authConfiguration.response_type)) {\r\n            // invalid response_type\r\n            return;\r\n        }\r\n\r\n        this.resetAuthorizationData(false);\r\n\r\n        this.oidcSecurityCommon.logDebug('BEGIN Authorize, no auth data');\r\n\r\n        let /** @type {?} */ state = this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_auth_state_control);\r\n        if (state === '') {\r\n            state = Date.now() + '' + Math.random();\r\n            this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_auth_state_control, state);\r\n        }\r\n\r\n        let /** @type {?} */ nonce = 'N' + Math.random() + '' + Date.now();\r\n        this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_auth_nonce, nonce);\r\n        this.oidcSecurityCommon.logDebug('AuthorizedController created. local state: ' + this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_auth_state_control));\r\n\r\n        let /** @type {?} */ url = this.createAuthorizeUrl(nonce, state, this.authWellKnownEndpoints.authorization_endpoint);\r\n        window.location.href = url;\r\n    }\n/**\n * @param {?=} hash\n * @return {?}\n */\nauthorizedCallback(hash?: string) {\r\n        let /** @type {?} */ silentRenew = this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_silent_renew_running);\r\n        let /** @type {?} */ isRenewProcess = (silentRenew === 'running');\r\n\r\n        this.oidcSecurityCommon.logDebug('BEGIN authorizedCallback, no auth data');\r\n        this.resetAuthorizationData(isRenewProcess);\r\n\r\n        hash = hash || window.location.hash.substr(1);\r\n\r\n        let /** @type {?} */ result: any = hash.split('&').reduce(function (result: any, item: string) {\r\n            let /** @type {?} */ parts = item.split('=');\r\n            result[parts[0]] = parts[1];\r\n            return result;\r\n        }, {});\r\n        this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_auth_result, result);\r\n\r\n        this.oidcSecurityCommon.logDebug(result);\r\n        this.oidcSecurityCommon.logDebug('authorizedCallback created, begin token validation');\r\n\r\n        let /** @type {?} */ access_token = '';\r\n        let /** @type {?} */ id_token = '';\r\n        let /** @type {?} */ authResponseIsValid = false;\r\n        let /** @type {?} */ decoded_id_token: any;\r\n\r\n        this.getSigningKeys()\r\n            .subscribe(jwtKeys => {\r\n                this.jwtKeys = jwtKeys;\r\n\r\n                if (!result.error) {\r\n\r\n                    // validate state\r\n                    if (this.oidcSecurityValidation.validateStateFromHashCallback(result.state, this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_auth_state_control))) {\r\n                        if (this.authConfiguration.response_type === 'id_token token') {\r\n                            access_token = result.access_token;\r\n                        }\r\n                        id_token = result.id_token;\r\n\r\n                        let /** @type {?} */ headerDecoded;\r\n                        decoded_id_token = this.oidcSecurityValidation.getPayloadFromToken(id_token, false);\r\n                        headerDecoded = this.oidcSecurityValidation.getHeaderFromToken(id_token, false);\r\n\r\n                        // validate jwt signature\r\n                        if (this.oidcSecurityValidation.validate_signature_id_token(id_token, this.jwtKeys)) {\r\n                            // validate nonce\r\n                            if (this.oidcSecurityValidation.validate_id_token_nonce(decoded_id_token, this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_auth_nonce))) {\r\n                                // validate required fields id_token\r\n                                if (this.oidcSecurityValidation.validate_required_id_token(decoded_id_token)) {\r\n                                    // validate max offset from the id_token issue to now\r\n                                    if (this.oidcSecurityValidation.validate_id_token_iat_max_offset(decoded_id_token, this.authConfiguration.max_id_token_iat_offset_allowed_in_seconds)) {\r\n                                        // validate iss\r\n                                        if (this.oidcSecurityValidation.validate_id_token_iss(decoded_id_token, this.authWellKnownEndpoints.issuer)) {\r\n                                            // validate aud\r\n                                            if (this.oidcSecurityValidation.validate_id_token_aud(decoded_id_token, this.authConfiguration.client_id)) {\r\n                                                // validate_id_token_exp_not_expired\r\n                                                if (this.oidcSecurityValidation.validate_id_token_exp_not_expired(decoded_id_token)) {\r\n                                                    // flow id_token token\r\n                                                    if (this.authConfiguration.response_type === 'id_token token') {\r\n                                                        // valiadate at_hash and access_token\r\n                                                        if (this.oidcSecurityValidation.validate_id_token_at_hash(access_token, decoded_id_token.at_hash) || !access_token) {\r\n                                                            authResponseIsValid = true;\r\n                                                            this.successful_validation();\r\n                                                        } else {\r\n                                                            this.oidcSecurityCommon.logWarning('authorizedCallback incorrect at_hash');\r\n                                                        }\r\n                                                    } else {\r\n                                                        authResponseIsValid = true;\r\n                                                        this.successful_validation();\r\n                                                    }\r\n                                                } else {\r\n                                                    this.oidcSecurityCommon.logWarning('authorizedCallback token expired');\r\n                                                }\r\n                                            } else {\r\n                                                this.oidcSecurityCommon.logWarning('authorizedCallback incorrect aud');\r\n                                            }\r\n                                        } else {\r\n                                            this.oidcSecurityCommon.logWarning('authorizedCallback incorrect iss does not match authWellKnownEndpoints issuer');\r\n                                        }\r\n                                    } else {\r\n                                        this.oidcSecurityCommon.logWarning('authorizedCallback Validation, iat rejected id_token was issued too far away from the current time');\r\n                                    }\r\n                                } else {\r\n                                    this.oidcSecurityCommon.logDebug('authorizedCallback Validation, one of the REQUIRED properties missing from id_token');\r\n                                }\r\n                            } else {\r\n                                this.oidcSecurityCommon.logWarning('authorizedCallback incorrect nonce');\r\n                            }\r\n                        } else {\r\n                            this.oidcSecurityCommon.logDebug('authorizedCallback Signature validation failed id_token');\r\n                        }\r\n                    } else {\r\n                        this.oidcSecurityCommon.logWarning('authorizedCallback incorrect state');\r\n                    }\r\n                }\r\n\r\n                this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_silent_renew_running, '');\r\n\r\n                if (authResponseIsValid) {\r\n                    this.setAuthorizationData(access_token, id_token);\r\n                    if (this.authConfiguration.auto_userinfo) {\r\n                        this.getUserinfo(isRenewProcess, result, id_token, decoded_id_token).subscribe((response) => {\r\n                            if (response) {\r\n\t\t\t\t\t\t\t\tif (this.authConfiguration.trigger_authorization_result_event) {\r\n\t\t\t\t\t\t\t\t\tthis.onAuthorizationResult.emit(AuthorizationResult.authorized);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tthis.router.navigate([this.authConfiguration.startup_route]);\r\n\t\t\t\t\t\t\t\t}\r\n                            } else {\r\n\t\t\t\t\t\t\t\tif (this.authConfiguration.trigger_authorization_result_event) {\r\n\t\t\t\t\t\t\t\t\tthis.onAuthorizationResult.emit(AuthorizationResult.unauthorized);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tthis.router.navigate([this.authConfiguration.unauthorized_route]);\r\n\t\t\t\t\t\t\t\t}\r\n                            }\r\n                        });\r\n                    } else {\r\n                        this.runTokenValidatation();\r\n                        if (this.authConfiguration.trigger_authorization_result_event) {\r\n\t\t\t\t\t\t\tthis.onAuthorizationResult.emit(AuthorizationResult.authorized);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.router.navigate([this.authConfiguration.startup_route]);\r\n\t\t\t\t\t\t}\r\n                    }\r\n                } else { // some went wrong\r\n                    this.oidcSecurityCommon.logDebug('authorizedCallback, token(s) validation failed, resetting');\r\n\t\t\t\t\tthis.resetAuthorizationData(false);\r\n\t\t\t\t\tif (this.authConfiguration.trigger_authorization_result_event) {\r\n\t\t\t\t\t\tthis.onAuthorizationResult.emit(AuthorizationResult.unauthorized);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.router.navigate([this.authConfiguration.unauthorized_route]);\r\n\t\t\t\t\t}\r\n                }\r\n            });\r\n    }\n/**\n * @param {?=} isRenewProcess\n * @param {?=} result\n * @param {?=} id_token\n * @param {?=} decoded_id_token\n * @return {?}\n */\ngetUserinfo(isRenewProcess = false, result?: any, id_token?: any, decoded_id_token?: any): Observable<boolean> {\r\n        result = result ? result : this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_auth_result);\r\n        id_token = id_token ? id_token : this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_id_token);\r\n        decoded_id_token = decoded_id_token ? decoded_id_token : this.oidcSecurityValidation.getPayloadFromToken(id_token, false);\r\n\r\n        return new Observable<boolean>(observer => {\r\n            // flow id_token token\r\n            if (this.authConfiguration.response_type === 'id_token token') {\r\n                if (isRenewProcess) {\r\n                    this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_session_state, result.session_state);\r\n                    observer.next(true);\r\n                    observer.complete();\r\n                } else {\r\n                    this.oidcSecurityUserService.initUserData()\r\n                        .subscribe(() => {\r\n                            this.oidcSecurityCommon.logDebug('authorizedCallback id_token token flow');\r\n                            if (this.oidcSecurityValidation.validate_userdata_sub_id_token(decoded_id_token.sub, this.oidcSecurityUserService.userData.sub)) {\r\n                                this.setUserData(this.oidcSecurityUserService.userData);\r\n                                this.oidcSecurityCommon.logDebug(this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_access_token));\r\n                                this.oidcSecurityCommon.logDebug(this.oidcSecurityUserService.userData);\r\n\r\n                                this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_session_state, result.session_state);\r\n\r\n                                this.runTokenValidatation();\r\n                                observer.next(true);\r\n                            } else { // some went wrong, userdata sub does not match that from id_token\r\n                                this.oidcSecurityCommon.logWarning('authorizedCallback, User data sub does not match sub in id_token');\r\n                                this.oidcSecurityCommon.logDebug('authorizedCallback, token(s) validation failed, resetting');\r\n                                this.resetAuthorizationData(false);\r\n                                observer.next(false);\r\n                            }\r\n                            observer.complete();\r\n                        });\r\n                }\r\n            } else { // flow id_token\r\n                this.oidcSecurityCommon.logDebug('authorizedCallback id_token flow');\r\n                this.oidcSecurityCommon.logDebug(this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_access_token));\r\n\r\n                // userData is set to the id_token decoded. No access_token.\r\n                this.oidcSecurityUserService.userData = decoded_id_token;\r\n                this.setUserData(this.oidcSecurityUserService.userData);\r\n\r\n                this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_session_state, result.session_state);\r\n\r\n                if (!isRenewProcess) {\r\n                    this.runTokenValidatation();\r\n                }\r\n\r\n                observer.next(true);\r\n                observer.complete();\r\n            }\r\n        });\r\n    }\n/**\n * @return {?}\n */\nlogoff() {\r\n        // /connect/endsession?id_token_hint=...&post_logout_redirect_uri=https://myapp.com\r\n        this.oidcSecurityCommon.logDebug('BEGIN Authorize, no auth data');\r\n\r\n        if (this.authWellKnownEndpoints.end_session_endpoint) {\r\n            let /** @type {?} */ end_session_endpoint = this.authWellKnownEndpoints.end_session_endpoint;\r\n            let /** @type {?} */ id_token_hint = this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_id_token);\r\n            let /** @type {?} */ url = this.createEndSessionUrl(end_session_endpoint, id_token_hint);\r\n\r\n            this.resetAuthorizationData(false);\r\n\r\n            if (this.authConfiguration.start_checksession && this.checkSessionChanged) {\r\n                this.oidcSecurityCommon.logDebug('only local login cleaned up, server session has changed');\r\n            } else {\r\n                window.location.href = url;\r\n            }\r\n        } else {\r\n            this.resetAuthorizationData(false);\r\n            this.oidcSecurityCommon.logDebug('only local login cleaned up, no end_session_endpoint');\r\n        }\r\n    }\n/**\n * @return {?}\n */\nprivate successful_validation() {\r\n        this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_auth_nonce, '');\r\n\r\n        if (this.authConfiguration.auto_clean_state_after_authentication) {\r\n            this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_auth_state_control, '');\r\n        }\r\n        this.oidcSecurityCommon.logDebug('AuthorizedCallback token(s) validated, continue');\r\n    }\n/**\n * @return {?}\n */\nprivate refreshSession() {\r\n        this.oidcSecurityCommon.logDebug('BEGIN refresh session Authorize');\r\n\r\n        let /** @type {?} */ state = this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_auth_state_control);\r\n        if (state === '') {\r\n            state = Date.now() + '' + Math.random();\r\n            this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_auth_state_control, state);\r\n        }\r\n\r\n        let /** @type {?} */ nonce = 'N' + Math.random() + '' + Date.now();\r\n        this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_auth_nonce, nonce);\r\n        this.oidcSecurityCommon.logDebug('RefreshSession created. adding myautostate: ' + this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_auth_state_control));\r\n\r\n        let /** @type {?} */ url = this.createAuthorizeUrl(nonce, state, this.authWellKnownEndpoints.authorization_endpoint);\r\n\r\n        this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_silent_renew_running, 'running');\r\n        this.oidcSecuritySilentRenew.startRenew(url);\r\n    }\n/**\n * @param {?} access_token\n * @param {?} id_token\n * @return {?}\n */\nprivate setAuthorizationData(access_token: any, id_token: any) {\r\n        if (this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_access_token) !== '') {\r\n            this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_access_token, '');\r\n        }\r\n\r\n        this.oidcSecurityCommon.logDebug(access_token);\r\n        this.oidcSecurityCommon.logDebug(id_token);\r\n        this.oidcSecurityCommon.logDebug('storing to storage, getting the roles');\r\n        this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_access_token, access_token);\r\n        this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_id_token, id_token);\r\n        this.setIsAuthorized(true);\r\n        this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_is_authorized, true);\r\n    }\n/**\n * @param {?} nonce\n * @param {?} state\n * @param {?} authorization_endpoint\n * @return {?}\n */\nprivate createAuthorizeUrl(nonce: string, state: string, authorization_endpoint: string): string {\r\n\r\n        let /** @type {?} */ urlParts = authorization_endpoint.split('?');\r\n        let /** @type {?} */ authorizationUrl = urlParts[0];\r\n        let /** @type {?} */ params = new URLSearchParams(urlParts[1]);\r\n        params.set('client_id', this.authConfiguration.client_id);\r\n        params.set('redirect_uri', this.authConfiguration.redirect_url);\r\n        params.set('response_type', this.authConfiguration.response_type);\r\n        params.set('scope', this.authConfiguration.scope);\r\n        params.set('nonce', nonce);\r\n        params.set('state', state);\r\n\r\n        let /** @type {?} */ customParams = Object.assign({}, this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_custom_request_params));\r\n\r\n        Object.keys(customParams).forEach(key => {\r\n            params.set(key, customParams[key]);\r\n        });\r\n\r\n        return `${authorizationUrl}?${params}`;\r\n    }\n/**\n * @param {?} end_session_endpoint\n * @param {?} id_token_hint\n * @return {?}\n */\nprivate createEndSessionUrl(end_session_endpoint: string, id_token_hint: string) {\r\n        let /** @type {?} */ urlParts = end_session_endpoint.split('?');\r\n\r\n        let /** @type {?} */ authorizationEndsessionUrl = urlParts[0];\r\n\r\n        let /** @type {?} */ params = new URLSearchParams(urlParts[1]);\r\n        params.set('id_token_hint', id_token_hint);\r\n        params.set('post_logout_redirect_uri', this.authConfiguration.post_logout_redirect_uri);\r\n\r\n        return `${authorizationEndsessionUrl}?${params}`;\r\n    }\n/**\n * @param {?} isRenewProcess\n * @return {?}\n */\nprivate resetAuthorizationData(isRenewProcess: boolean) {\r\n        if (!isRenewProcess) {\r\n            this.setIsAuthorized(false);\r\n            this.oidcSecurityCommon.resetStorageData(isRenewProcess);\r\n            this.checkSessionChanged = false;\r\n        }\r\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nhandleError(error: any) {\r\n        this.oidcSecurityCommon.logError(error);\r\n        if (error.status == 403) {\r\n\t\t\tif (this.authConfiguration.trigger_authorization_result_event) {\r\n\t\t\t\tthis.onAuthorizationResult.emit(AuthorizationResult.unauthorized);\r\n\t\t\t} else {\r\n\t\t\t\tthis.router.navigate([this.authConfiguration.forbidden_route]);\r\n\t\t\t}\r\n        } else if (error.status == 401) {\r\n            let /** @type {?} */ silentRenew = this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_silent_renew_running);\r\n\t\t\tthis.resetAuthorizationData(silentRenew);\r\n\t\t\tif (this.authConfiguration.trigger_authorization_result_event) {\r\n\t\t\t\tthis.onAuthorizationResult.emit(AuthorizationResult.unauthorized);\r\n\t\t\t} else {\r\n\t\t\t\tthis.router.navigate([this.authConfiguration.unauthorized_route]);\r\n\t\t\t}\r\n        }\r\n    }\n/**\n * @return {?}\n */\nprivate onCheckSessionChanged() {\r\n        this.oidcSecurityCommon.logDebug('onCheckSessionChanged');\r\n        this.checkSessionChanged = true;\r\n    }\n/**\n * @return {?}\n */\nprivate onWellKnownEndpointsLoaded() {\r\n        this.oidcSecurityCommon.logDebug('onWellKnownEndpointsLoaded');\r\n        this.authWellKnownEndpointsLoaded = true;\r\n    }\n/**\n * @return {?}\n */\nprivate runGetSigningKeys() {\r\n        this.getSigningKeys()\r\n            .subscribe(\r\n            jwtKeys => this.jwtKeys = jwtKeys,\r\n            error => this.errorMessage = /** @type {?} */(( <any>error)));\r\n    }\n/**\n * @return {?}\n */\nprivate getSigningKeys(): Observable<JwtKeys> {\r\n        this.oidcSecurityCommon.logDebug('jwks_uri: ' + this.authWellKnownEndpoints.jwks_uri);\r\n        return this.http.get(this.authWellKnownEndpoints.jwks_uri)\r\n            .map(this.extractData)\r\n            .catch(this.handleErrorGetSigningKeys);\r\n    }\n/**\n * @param {?} res\n * @return {?}\n */\nprivate extractData(res: Response) {\r\n        let /** @type {?} */ body = res.json();\r\n        return body;\r\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nprivate handleErrorGetSigningKeys(error: Response | any) {\r\n        let /** @type {?} */ errMsg: string;\r\n        if (error instanceof Response) {\r\n            const /** @type {?} */ body = error.json() || {};\r\n            const /** @type {?} */ err = body.error || JSON.stringify(body);\r\n            errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\r\n        } else {\r\n            errMsg = error.message ? error.message : error.toString();\r\n        }\r\n        console.error(errMsg);\r\n        return Observable.throw(errMsg);\r\n    }\n/**\n * @return {?}\n */\nprivate runTokenValidatation() {\r\n        let /** @type {?} */ source = Observable.timer(3000, 3000)\r\n            .timeInterval()\r\n            .pluck('interval')\r\n            .take(10000);\r\n\r\n        let /** @type {?} */ subscription = source.subscribe(() => {\r\n            if (this._isAuthorizedValue) {\r\n                if (this.oidcSecurityValidation.isTokenExpired(this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_id_token), this.authConfiguration.silent_renew_offset_in_seconds)) {\r\n                    this.oidcSecurityCommon.logDebug('IsAuthorized: id_token isTokenExpired, start silent renew if active');\r\n\r\n                    if (this.authConfiguration.silent_renew) {\r\n                        this.refreshSession();\r\n                    } else {\r\n                        this.resetAuthorizationData(false);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n            (err: any) => {\r\n                this.oidcSecurityCommon.logError('Error: ' + err);\r\n            },\r\n            () => {\r\n                this.oidcSecurityCommon.logDebug('Completed');\r\n            });\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID, ] }, ]},\n{type: Http, },\n{type: AuthConfiguration, },\n{type: Router, },\n{type: OidcSecurityCheckSession, },\n{type: OidcSecuritySilentRenew, },\n{type: OidcSecurityUserService, },\n{type: OidcSecurityCommon, },\n{type: AuthWellKnownEndpoints, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'onModuleSetup': [{ type: Output },],\n'onAuthorizationResult': [{ type: Output },],\n};\n}\n\nfunction OidcSecurityService_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcSecurityService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcSecurityService.ctorParameters;\n/** @type {?} */\nOidcSecurityService.propDecorators;\n/** @type {?} */\nOidcSecurityService.prototype.onModuleSetup;\n/** @type {?} */\nOidcSecurityService.prototype.onAuthorizationResult;\n/** @type {?} */\nOidcSecurityService.prototype.checkSessionChanged;\n/** @type {?} */\nOidcSecurityService.prototype.moduleSetup;\n/** @type {?} */\nOidcSecurityService.prototype._isAuthorized;\n/** @type {?} */\nOidcSecurityService.prototype._isAuthorizedValue;\n/** @type {?} */\nOidcSecurityService.prototype._userData;\n/** @type {?} */\nOidcSecurityService.prototype._userDataValue;\n/** @type {?} */\nOidcSecurityService.prototype.oidcSecurityValidation;\n/** @type {?} */\nOidcSecurityService.prototype.errorMessage;\n/** @type {?} */\nOidcSecurityService.prototype.jwtKeys;\n/** @type {?} */\nOidcSecurityService.prototype.authWellKnownEndpointsLoaded;\n/** @type {?} */\nOidcSecurityService.prototype.platformId;\n/** @type {?} */\nOidcSecurityService.prototype.http;\n/** @type {?} */\nOidcSecurityService.prototype.authConfiguration;\n/** @type {?} */\nOidcSecurityService.prototype.router;\n/** @type {?} */\nOidcSecurityService.prototype.oidcSecurityCheckSession;\n/** @type {?} */\nOidcSecurityService.prototype.oidcSecuritySilentRenew;\n/** @type {?} */\nOidcSecurityService.prototype.oidcSecurityUserService;\n/** @type {?} */\nOidcSecurityService.prototype.oidcSecurityCommon;\n/** @type {?} */\nOidcSecurityService.prototype.authWellKnownEndpoints;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { OidcSecurityService } from '../services/oidc.security.service';\nimport { AuthConfiguration, DefaultConfiguration } from './auth.configuration';\nimport { OidcSecurityValidation } from '../services/oidc.security.validation';\nimport { OidcSecurityCheckSession } from '../services/oidc.security.check-session';\nimport { OidcSecuritySilentRenew } from '../services/oidc.security.silent-renew';\nimport { OidcSecurityUserService } from '../services/oidc.security.user-service';\nimport { OidcSecurityCommon } from '../services/oidc.security.common';\nimport { OidcSecurityStorage, BrowserStorage } from '../services/oidc.security.storage';\nimport { AuthWellKnownEndpoints } from '../services/auth.well-known-endpoints';\nexport class AuthModule {\n/**\n * @param {?=} token\n * @return {?}\n */\nstatic forRoot(token: Token = {}): ModuleWithProviders {\n        return {\n            ngModule: AuthModule,\n            providers: [\n                OidcSecurityService,\n                OidcSecurityValidation,\n                OidcSecurityCheckSession,\n                OidcSecuritySilentRenew,\n                OidcSecurityUserService,\n                OidcSecurityCommon,\n                AuthConfiguration,\n                DefaultConfiguration,\n                AuthWellKnownEndpoints,\n                {\n                    provide: OidcSecurityStorage,\n                    useClass: token.storage || BrowserStorage\n                }\n            ]\n        };\n    }\n/**\n * @param {?=} token\n * @return {?}\n */\npublic static forChild(token: Token = {}): ModuleWithProviders {\n        return {\n            ngModule: AuthModule,\n            providers: [\n                OidcSecurityService,\n                OidcSecurityValidation,\n                OidcSecurityCheckSession,\n                OidcSecuritySilentRenew,\n                OidcSecurityUserService,\n                OidcSecurityCommon,\n                AuthConfiguration,\n                AuthWellKnownEndpoints,\n                {\n                    provide: OidcSecurityStorage,\n                    useClass: token.storage || BrowserStorage\n                }\n            ]\n        };\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AuthModule_tsickle_Closure_declarations() {\n/** @type {?} */\nAuthModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAuthModule.ctorParameters;\n}\n\n\nexport interface Type<T> extends Function {\n\n    new (...args: any[]): T;\n\n}\n\nexport interface Token {\n\n    storage?: Type<any>;\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nexport class DefaultConfiguration {\r\n    stsServer = 'https://localhost:44318';\r\n    redirect_url = 'https://localhost:44311';\r\n    // The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified by the iss (issuer) Claim as an audience.\r\n    // The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience, or if it contains additional audiences not trusted by the Client.\r\n    client_id = 'angularclient';\r\n    response_type = 'id_token token';\r\n    // For some oidc, we require resource identifier to be provided along with the request.\r\n    resource = '';\r\n    scope = 'openid email profile';\r\n    post_logout_redirect_uri = 'https://localhost:44311/unauthorized';\r\n    start_checksession = false;\r\n    silent_renew = true;\r\n    silent_renew_offset_in_seconds = 0;\r\n    startup_route = '/dataeventrecords';\r\n    // HTTP 403\r\n    forbidden_route = '/forbidden';\r\n    // HTTP 401\r\n    unauthorized_route = '/unauthorized';\r\n    auto_userinfo = true;\r\n\tauto_clean_state_after_authentication: true;\r\n\ttrigger_authorization_result_event: false;\r\n    log_console_warning_active = true;\r\n    log_console_debug_active = false;\r\n\r\n\r\n    // id_token C8: The iat Claim can be used to reject tokens that were issued too far away from the current time,\r\n    // limiting the amount of time that nonces need to be stored to prevent attacks.The acceptable range is Client specific.\r\n    max_id_token_iat_offset_allowed_in_seconds = 3;\r\n    override_well_known_configuration = false;\r\n    override_well_known_configuration_url = 'https://localhost:44386/wellknownconfiguration.json';\r\n\r\n    storage = typeof Storage !== 'undefined' ? sessionStorage : null;\r\n}\n\nfunction DefaultConfiguration_tsickle_Closure_declarations() {\n/** @type {?} */\nDefaultConfiguration.prototype.stsServer;\n/** @type {?} */\nDefaultConfiguration.prototype.redirect_url;\n/** @type {?} */\nDefaultConfiguration.prototype.client_id;\n/** @type {?} */\nDefaultConfiguration.prototype.response_type;\n/** @type {?} */\nDefaultConfiguration.prototype.resource;\n/** @type {?} */\nDefaultConfiguration.prototype.scope;\n/** @type {?} */\nDefaultConfiguration.prototype.post_logout_redirect_uri;\n/** @type {?} */\nDefaultConfiguration.prototype.start_checksession;\n/** @type {?} */\nDefaultConfiguration.prototype.silent_renew;\n/** @type {?} */\nDefaultConfiguration.prototype.silent_renew_offset_in_seconds;\n/** @type {?} */\nDefaultConfiguration.prototype.startup_route;\n/** @type {?} */\nDefaultConfiguration.prototype.forbidden_route;\n/** @type {?} */\nDefaultConfiguration.prototype.unauthorized_route;\n/** @type {?} */\nDefaultConfiguration.prototype.auto_userinfo;\n/** @type {?} */\nDefaultConfiguration.prototype.auto_clean_state_after_authentication;\n/** @type {?} */\nDefaultConfiguration.prototype.trigger_authorization_result_event;\n/** @type {?} */\nDefaultConfiguration.prototype.log_console_warning_active;\n/** @type {?} */\nDefaultConfiguration.prototype.log_console_debug_active;\n/** @type {?} */\nDefaultConfiguration.prototype.max_id_token_iat_offset_allowed_in_seconds;\n/** @type {?} */\nDefaultConfiguration.prototype.override_well_known_configuration;\n/** @type {?} */\nDefaultConfiguration.prototype.override_well_known_configuration_url;\n/** @type {?} */\nDefaultConfiguration.prototype.storage;\n}\n\nexport class OpenIDImplicitFlowConfiguration {\r\n\r\n    stsServer: string;\r\n    redirect_url: string;\r\n    client_id: string;\r\n    response_type: string;\r\n    resource: string;\r\n    scope: string;\r\n    post_logout_redirect_uri: string;\r\n    start_checksession: boolean;\r\n    silent_renew: boolean;\r\n    silent_renew_offset_in_seconds: number;\r\n    startup_route: string;\r\n    forbidden_route: string;\r\n    unauthorized_route: string;\r\n    auto_userinfo: boolean;\r\n\tauto_clean_state_after_authentication: boolean;\r\n\ttrigger_authorization_result_event: boolean;\r\n    log_console_warning_active: boolean;\r\n    log_console_debug_active: boolean;\r\n    max_id_token_iat_offset_allowed_in_seconds: number;\r\n    override_well_known_configuration: boolean;\r\n    override_well_known_configuration_url: string;\r\n    storage: any;\r\n}\n\nfunction OpenIDImplicitFlowConfiguration_tsickle_Closure_declarations() {\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.stsServer;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.redirect_url;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.client_id;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.response_type;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.resource;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.scope;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.post_logout_redirect_uri;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.start_checksession;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.silent_renew;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.silent_renew_offset_in_seconds;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.startup_route;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.forbidden_route;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.unauthorized_route;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.auto_userinfo;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.auto_clean_state_after_authentication;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.trigger_authorization_result_event;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.log_console_warning_active;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.log_console_debug_active;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.max_id_token_iat_offset_allowed_in_seconds;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.override_well_known_configuration;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.override_well_known_configuration_url;\n/** @type {?} */\nOpenIDImplicitFlowConfiguration.prototype.storage;\n}\n\nexport class AuthConfiguration {\nprivate openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration;\n/**\n * @return {?}\n */\nget stsServer(): string {\r\n        return this.openIDImplicitFlowConfiguration.stsServer || this.defaultConfig.stsServer;\r\n    }\n/**\n * @return {?}\n */\nget redirect_url(): string {\r\n        return this.openIDImplicitFlowConfiguration.redirect_url || this.defaultConfig.redirect_url;\r\n    }\n/**\n * @return {?}\n */\nget client_id(): string {\r\n        return this.openIDImplicitFlowConfiguration.client_id || this.defaultConfig.client_id;\r\n    }\n/**\n * @return {?}\n */\nget response_type(): string {\r\n        return this.openIDImplicitFlowConfiguration.response_type || this.defaultConfig.response_type;\r\n    }\n/**\n * @return {?}\n */\nget resource(): string {\r\n        return this.openIDImplicitFlowConfiguration.resource || this.defaultConfig.resource;\r\n    }\n/**\n * @return {?}\n */\nget scope(): string {\r\n        return this.openIDImplicitFlowConfiguration.scope || this.defaultConfig.scope;\r\n    }\n/**\n * @return {?}\n */\nget post_logout_redirect_uri(): string {\r\n        return this.openIDImplicitFlowConfiguration.post_logout_redirect_uri || this.defaultConfig.post_logout_redirect_uri;\r\n    }\n/**\n * @return {?}\n */\nget start_checksession(): boolean {\r\n        return this.openIDImplicitFlowConfiguration.start_checksession !== undefined ? this.openIDImplicitFlowConfiguration.start_checksession : this.defaultConfig.start_checksession;\r\n    }\n/**\n * @return {?}\n */\nget silent_renew(): boolean {\r\n        return this.openIDImplicitFlowConfiguration.silent_renew !== undefined ? this.openIDImplicitFlowConfiguration.silent_renew : this.defaultConfig.silent_renew;\r\n    }\n/**\n * @return {?}\n */\nget silent_renew_offset_in_seconds(): number {\r\n        return this.openIDImplicitFlowConfiguration.silent_renew_offset_in_seconds || this.defaultConfig.silent_renew_offset_in_seconds;\r\n    }\n/**\n * @return {?}\n */\nget startup_route(): string {\r\n        return this.openIDImplicitFlowConfiguration.startup_route || this.defaultConfig.startup_route;\r\n    }\n/**\n * @return {?}\n */\nget forbidden_route(): string {\r\n        return this.openIDImplicitFlowConfiguration.forbidden_route || this.defaultConfig.forbidden_route;\r\n    }\n/**\n * @return {?}\n */\nget unauthorized_route(): string {\r\n        return this.openIDImplicitFlowConfiguration.unauthorized_route || this.defaultConfig.unauthorized_route;\r\n    }\n/**\n * @return {?}\n */\nget auto_userinfo(): boolean {\r\n        return this.openIDImplicitFlowConfiguration.auto_userinfo !== undefined ? this.openIDImplicitFlowConfiguration.auto_userinfo : this.defaultConfig.auto_userinfo;\r\n    }\n/**\n * @return {?}\n */\nget auto_clean_state_after_authentication(): boolean {\r\n        return this.openIDImplicitFlowConfiguration.auto_clean_state_after_authentication !== undefined ? this.openIDImplicitFlowConfiguration.auto_clean_state_after_authentication : this.defaultConfig.auto_clean_state_after_authentication;\r\n\t}\n/**\n * @return {?}\n */\nget trigger_authorization_result_event(): boolean {\r\n        return this.openIDImplicitFlowConfiguration.trigger_authorization_result_event !== undefined ? this.openIDImplicitFlowConfiguration.trigger_authorization_result_event : this.defaultConfig.trigger_authorization_result_event;\r\n    }\n/**\n * @return {?}\n */\nget log_console_warning_active(): boolean {\r\n        return this.openIDImplicitFlowConfiguration.log_console_warning_active !== undefined ? this.openIDImplicitFlowConfiguration.log_console_warning_active : this.defaultConfig.log_console_warning_active;\r\n    }\n/**\n * @return {?}\n */\nget log_console_debug_active(): boolean {\r\n        return this.openIDImplicitFlowConfiguration.log_console_debug_active !== undefined ? this.openIDImplicitFlowConfiguration.log_console_debug_active : this.defaultConfig.log_console_debug_active;\r\n    }\n/**\n * @return {?}\n */\nget max_id_token_iat_offset_allowed_in_seconds(): number {\r\n        return this.openIDImplicitFlowConfiguration.max_id_token_iat_offset_allowed_in_seconds || this.defaultConfig.max_id_token_iat_offset_allowed_in_seconds;\r\n    }\n/**\n * @return {?}\n */\nget override_well_known_configuration(): boolean {\r\n        return this.openIDImplicitFlowConfiguration.override_well_known_configuration !== undefined ? this.openIDImplicitFlowConfiguration.override_well_known_configuration : this.defaultConfig.override_well_known_configuration;\r\n    }\n/**\n * @return {?}\n */\nget override_well_known_configuration_url(): string {\r\n        return this.openIDImplicitFlowConfiguration.override_well_known_configuration_url || this.defaultConfig.override_well_known_configuration_url;\r\n    }\n/**\n * @return {?}\n */\nget storage(): any {\r\n        return this.openIDImplicitFlowConfiguration.storage || this.defaultConfig.storage;\r\n    }\n/**\n * @param {?} defaultConfig\n */\nconstructor(private defaultConfig: DefaultConfiguration) { }\n/**\n * @param {?} openIDImplicitFlowConfiguration\n * @return {?}\n */\ninit(openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration) {\r\n        this.openIDImplicitFlowConfiguration = openIDImplicitFlowConfiguration;\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DefaultConfiguration, },\n];\n}\n\nfunction AuthConfiguration_tsickle_Closure_declarations() {\n/** @type {?} */\nAuthConfiguration.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAuthConfiguration.ctorParameters;\n/** @type {?} */\nAuthConfiguration.prototype.openIDImplicitFlowConfiguration;\n/** @type {?} */\nAuthConfiguration.prototype.defaultConfig;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { AuthConfiguration } from '../modules/auth.configuration';\n/**\n * Implement this class-interface to create a custom storage.\n * @abstract\n */\nexport abstract class OidcSecurityStorage {\n/**\n * This method must contain the logic to read the storage.\n * @abstract\n * @param {?} key\n * @return {?} The value of the given key\n */\nread(key: string) {}\n/**\n * This method must contain the logic to write the storage.\n * @abstract\n * @param {?} key\n * @param {?} value The value for the given key\n * @return {?}\n */\nwrite(key: string, value: any) {}\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction OidcSecurityStorage_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcSecurityStorage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcSecurityStorage.ctorParameters;\n}\n\nexport class BrowserStorage implements OidcSecurityStorage {\nprivate hasStorage: boolean;\n/**\n * @param {?} authConfiguration\n */\nconstructor(private authConfiguration: AuthConfiguration) {\n        this.hasStorage = typeof Storage !== 'undefined';\n    }\n/**\n * @param {?} key\n * @return {?}\n */\npublic read(key: string): any {\n        if (this.hasStorage) {\n            return JSON.parse(this.authConfiguration.storage.getItem(key));\n        }\n\n        return;\n    }\n/**\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\npublic write(key: string, value: any): void {\n        if (this.hasStorage) {\n            this.authConfiguration.storage.setItem(key, JSON.stringify(value));\n        }\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AuthConfiguration, },\n];\n}\n\nfunction BrowserStorage_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserStorage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserStorage.ctorParameters;\n/** @type {?} */\nBrowserStorage.prototype.hasStorage;\n/** @type {?} */\nBrowserStorage.prototype.authConfiguration;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\r\nimport { AuthConfiguration } from '../modules/auth.configuration';\r\nimport { OidcSecurityStorage } from './oidc.security.storage';\nexport class OidcSecurityCommon {\r\n\r\n    storage_auth_result = 'authorizationResult';\r\n    storage_access_token = 'authorizationData';\r\n    storage_id_token = 'authorizationDataIdToken';\r\n    storage_is_authorized = '_isAuthorized';\r\n    storage_user_data = 'userData';\r\n    storage_auth_nonce = 'authNonce';\r\n    storage_auth_state_control = 'authStateControl';\r\n    storage_well_known_endpoints = 'wellknownendpoints';\r\n    storage_session_state = 'session_state';\r\n    storage_silent_renew_running = 'storage_silent_renew_running';\r\n    storage_custom_request_params = 'storage_custom_request_params';\n/**\n * @param {?} authConfiguration\n * @param {?} oidcSecurityStorage\n */\nconstructor(private authConfiguration: AuthConfiguration,\nprivate oidcSecurityStorage: OidcSecurityStorage) {\r\n    }\n/**\n * @return {?}\n */\nsetupModule() { }\n/**\n * @param {?} key\n * @return {?}\n */\nretrieve(key: string): any {\r\n        return this.oidcSecurityStorage.read(key);\r\n    }\n/**\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\nstore(key: string, value: any) {\r\n        this.oidcSecurityStorage.write(key, value);\r\n    }\n/**\n * @param {?} isRenewProcess\n * @return {?}\n */\nresetStorageData(isRenewProcess: boolean) {\r\n        if (!isRenewProcess) {\r\n            this.store(this.storage_auth_result, '');\r\n            this.store(this.storage_session_state, '');\r\n            this.store(this.storage_silent_renew_running, '');\r\n            this.store(this.storage_is_authorized, false);\r\n            this.store(this.storage_access_token, '');\r\n            this.store(this.storage_id_token, '');\r\n            this.store(this.storage_user_data, '');\r\n        }\r\n    }\n/**\n * @return {?}\n */\ngetAccessToken(): any {\r\n        return this.retrieve(this.storage_access_token);\r\n    }\n/**\n * @return {?}\n */\ngetIdToken(): any {\r\n        return this.retrieve(this.storage_id_token);\r\n    }\n/**\n * @param {?} message\n * @return {?}\n */\nlogError(message: any) {\r\n        console.error(message);\r\n    }\n/**\n * @param {?} message\n * @return {?}\n */\nlogWarning(message: any) {\r\n        if (this.authConfiguration.log_console_warning_active) {\r\n            console.warn(message);\r\n        }\r\n    }\n/**\n * @param {?} message\n * @return {?}\n */\nlogDebug(message: any) {\r\n        if (this.authConfiguration.log_console_debug_active) {\r\n            console.log(message);\r\n        }\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AuthConfiguration, },\n{type: OidcSecurityStorage, },\n];\n}\n\nfunction OidcSecurityCommon_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcSecurityCommon.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcSecurityCommon.ctorParameters;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_auth_result;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_access_token;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_id_token;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_is_authorized;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_user_data;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_auth_nonce;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_auth_state_control;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_well_known_endpoints;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_session_state;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_silent_renew_running;\n/** @type {?} */\nOidcSecurityCommon.prototype.storage_custom_request_params;\n/** @type {?} */\nOidcSecurityCommon.prototype.authConfiguration;\n/** @type {?} */\nOidcSecurityCommon.prototype.oidcSecurityStorage;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\n\r\nimport { KJUR, KEYUTIL, hextob64u } from 'jsrsasign';\nexport class OidcSecurityValidation {\n/**\n * @param {?} oidcSecurityCommon\n */\nconstructor(private oidcSecurityCommon: OidcSecurityCommon) {\r\n    }\n/**\n * @param {?} token\n * @param {?=} offsetSeconds\n * @return {?}\n */\nisTokenExpired(token: string, offsetSeconds?: number): boolean {\r\n\r\n        let /** @type {?} */ decoded: any;\r\n        decoded = this.getPayloadFromToken(token, false);\r\n\r\n        return !(this.validate_id_token_exp_not_expired(decoded, offsetSeconds));\r\n    }\n/**\n * @param {?} decoded_id_token\n * @param {?=} offsetSeconds\n * @return {?}\n */\nvalidate_id_token_exp_not_expired(decoded_id_token: string, offsetSeconds?: number): boolean {\r\n        let /** @type {?} */ tokenExpirationDate = this.getTokenExpirationDate(decoded_id_token);\r\n        offsetSeconds = offsetSeconds || 0;\r\n\r\n        if (tokenExpirationDate == null) {\r\n            return false;\r\n        }\r\n\r\n        // Token not expired?\r\n        return (tokenExpirationDate.valueOf() > (new Date().valueOf() + (offsetSeconds * 1000)));\r\n    }\n/**\n * @param {?} dataIdToken\n * @return {?}\n */\nvalidate_required_id_token(dataIdToken: any): boolean {\r\n\r\n        let /** @type {?} */ validated = true;\r\n        if (!dataIdToken.hasOwnProperty('iss')) {\r\n            validated = false;\r\n            this.oidcSecurityCommon.logWarning('iss is missing, this is required in the id_token');\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('sub')) {\r\n            validated = false;\r\n            this.oidcSecurityCommon.logWarning('sub is missing, this is required in the id_token');\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('aud')) {\r\n            validated = false;\r\n            this.oidcSecurityCommon.logWarning('aud is missing, this is required in the id_token');\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('exp')) {\r\n            validated = false;\r\n            this.oidcSecurityCommon.logWarning('exp is missing, this is required in the id_token');\r\n        }\r\n\r\n        if (!dataIdToken.hasOwnProperty('iat')) {\r\n            validated = false;\r\n            this.oidcSecurityCommon.logWarning('iat is missing, this is required in the id_token');\r\n        }\r\n\r\n        return validated;\r\n    }\n/**\n * @param {?} dataIdToken\n * @param {?} max_offset_allowed_in_seconds\n * @return {?}\n */\nvalidate_id_token_iat_max_offset(dataIdToken: any, max_offset_allowed_in_seconds: number): boolean {\r\n        if (!dataIdToken.hasOwnProperty('iat')) {\r\n            return false;\r\n        }\r\n\r\n        let /** @type {?} */ dateTime_iat_id_token = new Date(0); // The 0 here is the key, which sets the date to the epoch\r\n        dateTime_iat_id_token.setUTCSeconds(dataIdToken.iat);\r\n\r\n        max_offset_allowed_in_seconds = max_offset_allowed_in_seconds || 0;\r\n\r\n        if (dateTime_iat_id_token == null) {\r\n            return false;\r\n        }\r\n\r\n        this.oidcSecurityCommon.logDebug('validate_id_token_iat_max_offset: ' + (new Date().valueOf() - dateTime_iat_id_token.valueOf()) + ' < ' + (max_offset_allowed_in_seconds * 1000));\r\n        return ((new Date().valueOf() - dateTime_iat_id_token.valueOf()) < (max_offset_allowed_in_seconds * 1000));\r\n    }\n/**\n * @param {?} dataIdToken\n * @param {?} local_nonce\n * @return {?}\n */\nvalidate_id_token_nonce(dataIdToken: any, local_nonce: any): boolean {\r\n        if (dataIdToken.nonce !== local_nonce) {\r\n            this.oidcSecurityCommon.logDebug('Validate_id_token_nonce failed, dataIdToken.nonce: ' + dataIdToken.nonce + ' local_nonce:' + local_nonce);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\n/**\n * @param {?} dataIdToken\n * @param {?} authWellKnownEndpoints_issuer\n * @return {?}\n */\nvalidate_id_token_iss(dataIdToken: any, authWellKnownEndpoints_issuer: any): boolean {\r\n        if (dataIdToken.iss != authWellKnownEndpoints_issuer) {\r\n            this.oidcSecurityCommon.logDebug('Validate_id_token_iss failed, dataIdToken.iss: ' + dataIdToken.iss + ' authWellKnownEndpoints issuer:' + authWellKnownEndpoints_issuer);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\n/**\n * @param {?} dataIdToken\n * @param {?} aud\n * @return {?}\n */\nvalidate_id_token_aud(dataIdToken: any, aud: any): boolean {\r\n        if (dataIdToken.aud != aud) {\r\n            this.oidcSecurityCommon.logDebug('Validate_id_token_aud failed, dataIdToken.aud: ' + dataIdToken.aud + ' client_id:' + aud);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\n/**\n * @param {?} state\n * @param {?} local_state\n * @return {?}\n */\nvalidateStateFromHashCallback(state: any, local_state: any): boolean {\r\n        if (state != local_state) {\r\n            this.oidcSecurityCommon.logDebug('ValidateStateFromHashCallback failed, state: ' + state + ' local_state:' + local_state);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\n/**\n * @param {?} id_token_sub\n * @param {?} userdata_sub\n * @return {?}\n */\nvalidate_userdata_sub_id_token(id_token_sub: any, userdata_sub: any): boolean {\r\n        if (id_token_sub != userdata_sub) {\r\n            this.oidcSecurityCommon.logDebug('validate_userdata_sub_id_token failed, id_token_sub: ' + id_token_sub + ' userdata_sub:' + userdata_sub);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\n/**\n * @param {?} token\n * @param {?} encode\n * @return {?}\n */\ngetPayloadFromToken(token: any, encode: boolean) {\r\n        let /** @type {?} */ data = {};\r\n        if (typeof token !== 'undefined') {\r\n            let /** @type {?} */ encoded = token.split('.')[1];\r\n            if (encode) {\r\n                return encoded;\r\n            }\r\n            data = JSON.parse(this.urlBase64Decode(encoded));\r\n        }\r\n\r\n        return data;\r\n    }\n/**\n * @param {?} token\n * @param {?} encode\n * @return {?}\n */\ngetHeaderFromToken(token: any, encode: boolean) {\r\n        let /** @type {?} */ data = {};\r\n        if (typeof token !== 'undefined') {\r\n            let /** @type {?} */ encoded = token.split('.')[0];\r\n            if (encode) {\r\n                return encoded;\r\n            }\r\n            data = JSON.parse(this.urlBase64Decode(encoded));\r\n        }\r\n\r\n        return data;\r\n    }\n/**\n * @param {?} token\n * @param {?} encode\n * @return {?}\n */\ngetSignatureFromToken(token: any, encode: boolean) {\r\n        let /** @type {?} */ data = {};\r\n        if (typeof token !== 'undefined') {\r\n            let /** @type {?} */ encoded = token.split('.')[2];\r\n            if (encode) {\r\n                return encoded;\r\n            }\r\n            data = JSON.parse(this.urlBase64Decode(encoded));\r\n        }\r\n\r\n        return data;\r\n    }\n/**\n * @param {?} id_token\n * @param {?} jwtkeys\n * @return {?}\n */\nvalidate_signature_id_token(id_token: any, jwtkeys: any): boolean {\r\n\r\n        if (!jwtkeys || !jwtkeys.keys) {\r\n            return false;\r\n        }\r\n\r\n        let /** @type {?} */ header_data = this.getHeaderFromToken(id_token, false);\r\n\r\n        let /** @type {?} */ kid = header_data.kid;\r\n        let /** @type {?} */ alg = header_data.alg;\r\n\r\n        if ('RS256' != alg) {\r\n            this.oidcSecurityCommon.logWarning('Only RS256 supported');\r\n            return false;\r\n        }\r\n\r\n        let /** @type {?} */ isValid = false;\r\n\r\n        if (!header_data.hasOwnProperty('kid')) {\r\n            // exactly 1 key in the jwtkeys and no kid in the Jose header\r\n            // kty\t\"RSA\" use \"sig\"\r\n            let /** @type {?} */ amountOfMatchingKeys = 0;\r\n            for (let /** @type {?} */ key of jwtkeys.keys) {\r\n                if (key.kty == 'RSA' && key.use == 'sig') {\r\n                    amountOfMatchingKeys = amountOfMatchingKeys + 1;\r\n                }\r\n            }\r\n\r\n            if (amountOfMatchingKeys == 0) {\r\n                this.oidcSecurityCommon.logWarning('no keys found, incorrect Signature, validation failed for id_token');\r\n                return false;\r\n            } else if (amountOfMatchingKeys > 1 ) {\r\n                this.oidcSecurityCommon.logWarning('no ID Token kid claim in JOSE header and multiple supplied in jwks_uri');\r\n                return false;\r\n            } else {\r\n                for (let /** @type {?} */ key of jwtkeys.keys) {\r\n                    if (key.kty == 'RSA' && key.use == 'sig') {\r\n                        let /** @type {?} */ publickey = KEYUTIL.getKey(key);\r\n                        isValid = KJUR.jws.JWS.verify(id_token, publickey, ['RS256']);\r\n                        if (!isValid) {\r\n                            this.oidcSecurityCommon.logWarning('incorrect Signature, validation failed for id_token');\r\n                        }\r\n                        return isValid;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            // kid in the Jose header of id_token\r\n            for (let /** @type {?} */ key of jwtkeys.keys) {\r\n                if (key.kid == kid) {\r\n                    let /** @type {?} */ publickey = KEYUTIL.getKey(key);\r\n                    isValid = KJUR.jws.JWS.verify(id_token, publickey, ['RS256']);\r\n                    if (!isValid) {\r\n                        this.oidcSecurityCommon.logWarning('incorrect Signature, validation failed for id_token');\r\n                    }\r\n                    return isValid;\r\n                }\r\n            }\r\n        }\r\n\r\n        return isValid;\r\n    }\n/**\n * @param {?} response_type\n * @return {?}\n */\nconfig_validate_response_type(response_type: string): boolean {\r\n        if (response_type === 'id_token token' || response_type === 'id_token') {\r\n            return true;\r\n        }\r\n\r\n        this.oidcSecurityCommon.logWarning('module configure incorrect, invalid response_type:' + response_type);\r\n        return false;\r\n    }\n/**\n * @param {?} access_token\n * @param {?} at_hash\n * @return {?}\n */\nvalidate_id_token_at_hash(access_token: any, at_hash: any): boolean {\r\n        this.oidcSecurityCommon.logDebug('From the server:' + at_hash);\r\n        let /** @type {?} */ testdata =  this.generate_at_hash('' + access_token);\r\n        this.oidcSecurityCommon.logDebug('client validation not decoded:' + testdata);\r\n        if (testdata == at_hash) {\r\n            return true; // isValid;\r\n        } else {\r\n            let /** @type {?} */ testValue = this.generate_at_hash('' + decodeURIComponent(access_token));\r\n            this.oidcSecurityCommon.logDebug('-gen access--' + testValue);\r\n           if (testValue == at_hash) {\r\n                return true; // isValid\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\n/**\n * @param {?} access_token\n * @return {?}\n */\nprivate generate_at_hash(access_token: any): string {\r\n      let /** @type {?} */ hash = KJUR.crypto.Util.hashString(access_token, 'sha256');\r\n        let /** @type {?} */ first128bits = hash.substr(0, hash.length / 2);\r\n        let /** @type {?} */ testdata = hextob64u(first128bits);\r\n\r\n      return testdata;\r\n    }\n/**\n * @param {?} dataIdToken\n * @return {?}\n */\nprivate getTokenExpirationDate(dataIdToken: any): Date {\r\n        if (!dataIdToken.hasOwnProperty('exp')) {\r\n            return new Date();\r\n        }\r\n\r\n        let /** @type {?} */ date = new Date(0); // The 0 here is the key, which sets the date to the epoch\r\n        date.setUTCSeconds(dataIdToken.exp);\r\n\r\n        return date;\r\n    }\n/**\n * @param {?} str\n * @return {?}\n */\nprivate urlBase64Decode(str: string) {\r\n        let /** @type {?} */ output = str.replace('-', '+').replace('_', '/');\r\n        switch (output.length % 4) {\r\n            case 0:\r\n                break;\r\n            case 2:\r\n                output += '==';\r\n                break;\r\n            case 3:\r\n                output += '=';\r\n                break;\r\n            default:\r\n                throw 'Illegal base64url string!';\r\n        }\r\n\r\n        return window.atob(output);\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: OidcSecurityCommon, },\n];\n}\n\nfunction OidcSecurityValidation_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcSecurityValidation.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcSecurityValidation.ctorParameters;\n/** @type {?} */\nOidcSecurityValidation.prototype.oidcSecurityCommon;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, EventEmitter, Output } from '@angular/core';\r\nimport { Http, Response, Headers } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport'rxjs/add/operator/map';\r\nimport'rxjs/add/operator/catch';\r\nimport'rxjs/add/observable/throw';\r\nimport { AuthConfiguration } from '../modules/auth.configuration';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\nexport class AuthWellKnownEndpoints {\r\n\r\n     onWellKnownEndpointsLoaded: EventEmitter<any> = new EventEmitter<any>(true);\r\n\r\n    issuer: string;\r\n    jwks_uri: string;\r\n    authorization_endpoint: string;\r\n    token_endpoint: string;\r\n    userinfo_endpoint: string;\r\n    end_session_endpoint: string;\r\n    check_session_iframe: string;\r\n    revocation_endpoint: string;\r\n    introspection_endpoint: string;\n/**\n * @param {?} http\n * @param {?} authConfiguration\n * @param {?} oidcSecurityCommon\n */\nconstructor(\nprivate http: Http,\nprivate authConfiguration: AuthConfiguration,\nprivate oidcSecurityCommon: OidcSecurityCommon\r\n    ) {\r\n    }\n/**\n * @return {?}\n */\nsetupModule() {\r\n        let /** @type {?} */ data = this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_well_known_endpoints);\r\n        this.oidcSecurityCommon.logDebug(data);\r\n        if (data && data !== '') {\r\n            this.oidcSecurityCommon.logDebug('AuthWellKnownEndpoints already defined');\r\n            this.issuer = data.issuer;\r\n            this.jwks_uri = data.jwks_uri;\r\n            this.authorization_endpoint = data.authorization_endpoint;\r\n            this.token_endpoint = data.token_endpoint;\r\n            this.userinfo_endpoint = data.userinfo_endpoint;\r\n\r\n            if (data.end_session_endpoint) {\r\n                this.end_session_endpoint = data.end_session_endpoint;\r\n\r\n            };\r\n\r\n            if (data.check_session_iframe) {\r\n                this.check_session_iframe = data.check_session_iframe;\r\n            };\r\n\r\n            if (data.revocation_endpoint) {\r\n                this.revocation_endpoint = data.revocation_endpoint;\r\n            };\r\n\r\n            if (data.introspection_endpoint) {\r\n                this.introspection_endpoint = data.introspection_endpoint;\r\n            }\r\n\r\n            this.onWellKnownEndpointsLoaded.emit();\r\n        } else {\r\n            this.oidcSecurityCommon.logDebug('AuthWellKnownEndpoints first time, get from the server');\r\n            this.getWellKnownEndpoints()\r\n                .subscribe((data: any) => {\r\n                    this.issuer = data.issuer;\r\n                    this.jwks_uri = data.jwks_uri;\r\n                    this.authorization_endpoint = data.authorization_endpoint;\r\n                    this.token_endpoint = data.token_endpoint;\r\n                    this.userinfo_endpoint = data.userinfo_endpoint;\r\n\r\n                    if (data.end_session_endpoint) {\r\n                        this.end_session_endpoint = data.end_session_endpoint;\r\n                    };\r\n\r\n                    if (data.check_session_iframe) {\r\n                        this.check_session_iframe = data.check_session_iframe;\r\n                    };\r\n\r\n                    if (data.revocation_endpoint) {\r\n                        this.revocation_endpoint = data.revocation_endpoint;\r\n                    };\r\n\r\n                    if (data.introspection_endpoint) {\r\n                        this.introspection_endpoint = data.introspection_endpoint;\r\n                    }\r\n\r\n                    this.oidcSecurityCommon.store(this.oidcSecurityCommon.storage_well_known_endpoints, data);\r\n                    this.oidcSecurityCommon.logDebug(data);\r\n\r\n                    this.onWellKnownEndpointsLoaded.emit();\r\n                });\r\n        }\r\n    }\nprivate getWellKnownEndpoints = (): Observable<any> => {\r\n\r\n        let /** @type {?} */ headers = new Headers();\r\n        headers.append('Accept', 'application/json');\r\n\r\n        let /** @type {?} */ url = this.authConfiguration.stsServer + '/.well-known/openid-configuration';\r\n        if (this.authConfiguration.override_well_known_configuration) {\r\n            url = this.authConfiguration.override_well_known_configuration_url;\r\n        }\r\n\r\n        return this.http.get(url, {\r\n            headers: headers,\r\n        }).map((res: any) => res.json());\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n{type: AuthConfiguration, },\n{type: OidcSecurityCommon, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'onWellKnownEndpointsLoaded': [{ type: Output },],\n};\n}\n\nfunction AuthWellKnownEndpoints_tsickle_Closure_declarations() {\n/** @type {?} */\nAuthWellKnownEndpoints.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAuthWellKnownEndpoints.ctorParameters;\n/** @type {?} */\nAuthWellKnownEndpoints.propDecorators;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.onWellKnownEndpointsLoaded;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.issuer;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.jwks_uri;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.authorization_endpoint;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.token_endpoint;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.userinfo_endpoint;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.end_session_endpoint;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.check_session_iframe;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.revocation_endpoint;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.introspection_endpoint;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.getWellKnownEndpoints;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.http;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.authConfiguration;\n/** @type {?} */\nAuthWellKnownEndpoints.prototype.oidcSecurityCommon;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, EventEmitter, Output } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport'rxjs/add/operator/map';\r\nimport'rxjs/add/operator/catch';\r\nimport'rxjs/add/observable/throw';\r\nimport'rxjs/add/observable/interval';\r\nimport'rxjs/add/observable/timer';\r\nimport { AuthConfiguration } from '../modules/auth.configuration';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\nimport { AuthWellKnownEndpoints } from './auth.well-known-endpoints';\r\nimport { Observer } from 'rxjs/Observer';\nexport class OidcSecurityCheckSession {\nprivate sessionIframe: any;\nprivate iframeMessageEvent: any;\r\n\r\n     onCheckSessionChanged: EventEmitter<any> = new EventEmitter<any>(true);\n/**\n * @param {?} authConfiguration\n * @param {?} oidcSecurityCommon\n * @param {?} authWellKnownEndpoints\n */\nconstructor(\nprivate authConfiguration: AuthConfiguration,\nprivate oidcSecurityCommon: OidcSecurityCommon,\nprivate authWellKnownEndpoints: AuthWellKnownEndpoints\r\n    ) {\r\n    }\n/**\n * @return {?}\n */\ninit() {\r\n        let /** @type {?} */ exists = window.parent.document.getElementById('myiFrameForCheckSession');\r\n        if (!exists) {\r\n            this.sessionIframe = window.document.createElement('iframe');\r\n\r\n            this.sessionIframe.id = 'myiFrameForCheckSession';\r\n            this.oidcSecurityCommon.logDebug(this.sessionIframe);\r\n            this.sessionIframe.style.display = 'none';\r\n            this.sessionIframe.src = this.authWellKnownEndpoints.check_session_iframe;\r\n\r\n            window.document.body.appendChild(this.sessionIframe);\r\n            this.iframeMessageEvent = this.messageHandler.bind(this);\r\n            window.addEventListener('message', this.iframeMessageEvent, false);\r\n\r\n            return Observable.create((observer: Observer<any>) => {\r\n                this.sessionIframe.onload = () => {\r\n                    observer.next(this);\r\n                    observer.complete();\r\n                }\r\n            });\r\n        }\r\n\r\n        return Observable.empty<Response>();\r\n    }\n/**\n * @param {?} clientId\n * @return {?}\n */\npollServerSession(clientId: any) {\r\n        let /** @type {?} */ source = Observable.timer(3000, 3000)\r\n            .timeInterval()\r\n            .pluck('interval')\r\n            .take(10000);\r\n\r\n        let /** @type {?} */ subscription = source.subscribe(() => {\r\n                this.oidcSecurityCommon.logDebug(this.sessionIframe);\r\n                let /** @type {?} */ session_state = this.oidcSecurityCommon.retrieve(this.oidcSecurityCommon.storage_session_state);\r\n                if (session_state && session_state !== '') {\r\n                    this.sessionIframe.contentWindow.postMessage(clientId + ' ' + session_state, this.authConfiguration.stsServer);\r\n                }\r\n            },\r\n            (err: any) => {\r\n                this.oidcSecurityCommon.logError('pollServerSession error: ' + err);\r\n            },\r\n            () => {\r\n                this.oidcSecurityCommon.logDebug('checksession pollServerSession completed');\r\n            });\r\n    }\n/**\n * @param {?} e\n * @return {?}\n */\nprivate messageHandler(e: any) {\r\n        if (e.origin === this.authConfiguration.stsServer &&\r\n            e.source === this.sessionIframe.contentWindow\r\n        ) {\r\n            if (e.data === 'error') {\r\n                this.oidcSecurityCommon.logWarning('error from checksession messageHandler');\r\n            } else if (e.data === 'changed') {\r\n                this.onCheckSessionChanged.emit();\r\n            } else {\r\n                this.oidcSecurityCommon.logDebug(e.data + ' from checksession messageHandler');\r\n            }\r\n        }\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AuthConfiguration, },\n{type: OidcSecurityCommon, },\n{type: AuthWellKnownEndpoints, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'onCheckSessionChanged': [{ type: Output },],\n};\n}\n\nfunction OidcSecurityCheckSession_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcSecurityCheckSession.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcSecurityCheckSession.ctorParameters;\n/** @type {?} */\nOidcSecurityCheckSession.propDecorators;\n/** @type {?} */\nOidcSecurityCheckSession.prototype.sessionIframe;\n/** @type {?} */\nOidcSecurityCheckSession.prototype.iframeMessageEvent;\n/** @type {?} */\nOidcSecurityCheckSession.prototype.onCheckSessionChanged;\n/** @type {?} */\nOidcSecurityCheckSession.prototype.authConfiguration;\n/** @type {?} */\nOidcSecurityCheckSession.prototype.oidcSecurityCommon;\n/** @type {?} */\nOidcSecurityCheckSession.prototype.authWellKnownEndpoints;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\nimport { Observer } from 'rxjs/Observer';\r\nimport { Observable } from 'rxjs/Observable';\nexport class OidcSecuritySilentRenew {\nprivate sessionIframe: any;\n/**\n * @param {?} oidcSecurityCommon\n */\nconstructor(private oidcSecurityCommon: OidcSecurityCommon) {\r\n    }\n/**\n * @return {?}\n */\ninitRenew() {\r\n        let /** @type {?} */ existsparent = undefined;\r\n        try {\r\n          let /** @type {?} */ parentdoc = window.parent.document;\r\n          if (!parentdoc) {\r\n              throw new Error('Unaccessible');\r\n          }\r\n\r\n          existsparent =  parentdoc.getElementById('myiFrameForSilentRenew');\r\n        } catch ( /** @type {?} */e) {\r\n            // not accessible\r\n        }\r\n        let /** @type {?} */ exists = window.document.getElementById('myiFrameForSilentRenew');\r\n        if (existsparent) {\r\n            this.sessionIframe = existsparent;\r\n        } else if (exists) {\r\n            this.sessionIframe = exists;\r\n        }\r\n\r\n        if (!exists && !existsparent) {\r\n            this.sessionIframe = window.document.createElement('iframe');\r\n            this.sessionIframe.id = 'myiFrameForSilentRenew';\r\n            this.oidcSecurityCommon.logDebug(this.sessionIframe);\r\n            this.sessionIframe.style.display = 'none';\r\n\r\n            window.document.body.appendChild(this.sessionIframe);\r\n        }\r\n    }\n/**\n * @param {?} url\n * @return {?}\n */\nstartRenew(url: string) {\r\n        let /** @type {?} */ existsparent = undefined;\r\n        try {\r\n          let /** @type {?} */ parentdoc = window.parent.document;\r\n          if (!parentdoc) {\r\n              throw new Error('Unaccessible');\r\n          }\r\n\r\n          existsparent =  parentdoc.getElementById('myiFrameForSilentRenew');\r\n        } catch ( /** @type {?} */e) {\r\n            // not accessible\r\n        }\r\n        let /** @type {?} */ exists = window.document.getElementById('myiFrameForSilentRenew');\r\n        if (existsparent) {\r\n            this.sessionIframe = existsparent;\r\n        } else if (exists) {\r\n            this.sessionIframe = exists;\r\n        }\r\n\r\n        this.oidcSecurityCommon.logDebug('startRenew for URL:' + url);\r\n        this.sessionIframe.src = url;\r\n\r\n        return Observable.create((observer: Observer<any>) => {\r\n            this.sessionIframe.onload = () => {\r\n                observer.next(this);\r\n                observer.complete();\r\n            }\r\n        });\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: OidcSecurityCommon, },\n];\n}\n\nfunction OidcSecuritySilentRenew_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcSecuritySilentRenew.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcSecuritySilentRenew.ctorParameters;\n/** @type {?} */\nOidcSecuritySilentRenew.prototype.sessionIframe;\n/** @type {?} */\nOidcSecuritySilentRenew.prototype.oidcSecurityCommon;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\r\nimport { Http, Response, Headers } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport'rxjs/add/operator/map';\r\nimport'rxjs/add/operator/catch';\r\nimport'rxjs/add/observable/throw';\r\n\r\nimport { AuthConfiguration } from '../modules/auth.configuration';\r\nimport { OidcSecurityCommon } from './oidc.security.common';\r\nimport { AuthWellKnownEndpoints } from './auth.well-known-endpoints';\nexport class OidcSecurityUserService {\r\n\r\n    userData: any = '';\n/**\n * @param {?} http\n * @param {?} authConfiguration\n * @param {?} oidcSecurityCommon\n * @param {?} authWellKnownEndpoints\n */\nconstructor(\nprivate http: Http,\nprivate authConfiguration: AuthConfiguration,\nprivate oidcSecurityCommon: OidcSecurityCommon,\nprivate authWellKnownEndpoints: AuthWellKnownEndpoints\r\n    ) {\r\n    }\n/**\n * @return {?}\n */\ninitUserData() {\r\n        return this.getIdentityUserData()\r\n            .map(data => this.userData = data);\r\n    }\nprivate getIdentityUserData = (): Observable<any> => {\r\n\r\n        let /** @type {?} */ headers = new Headers();\r\n        headers.append('Accept', 'application/json');\r\n\r\n        let /** @type {?} */ token = this.oidcSecurityCommon.getAccessToken();\r\n\r\n        if (token !== '') {\r\n            headers.append('Authorization', 'Bearer ' + decodeURIComponent(token));\r\n        }\r\n\r\n        return this.http.get(this.authWellKnownEndpoints.userinfo_endpoint, {\r\n            headers: headers,\r\n            body: ''\r\n        }).map((res: any) => res.json());\r\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nprivate handleError(error: any) {\r\n        this.oidcSecurityCommon.logError(error);\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n{type: AuthConfiguration, },\n{type: OidcSecurityCommon, },\n{type: AuthWellKnownEndpoints, },\n];\n}\n\nfunction OidcSecurityUserService_tsickle_Closure_declarations() {\n/** @type {?} */\nOidcSecurityUserService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOidcSecurityUserService.ctorParameters;\n/** @type {?} */\nOidcSecurityUserService.prototype.userData;\n/** @type {?} */\nOidcSecurityUserService.prototype.getIdentityUserData;\n/** @type {?} */\nOidcSecurityUserService.prototype.http;\n/** @type {?} */\nOidcSecurityUserService.prototype.authConfiguration;\n/** @type {?} */\nOidcSecurityUserService.prototype.oidcSecurityCommon;\n/** @type {?} */\nOidcSecurityUserService.prototype.authWellKnownEndpoints;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\nexport type AuthorizationResult = number;\nexport let AuthorizationResult: any = {};\nAuthorizationResult.authorized = 1;\nAuthorizationResult.forbidden = 2;\nAuthorizationResult.unauthorized = 3;\nAuthorizationResult[AuthorizationResult.authorized] = \"authorized\";\nAuthorizationResult[AuthorizationResult.forbidden] = \"forbidden\";\nAuthorizationResult[AuthorizationResult.unauthorized] = \"unauthorized\";\n"],"names":["this","resetAuthorizationData","isRenewProcess","hash","window","location","substr","result","split","reduce","item","parts","oidcSecurityCommon","store","storage_auth_result","logDebug","decoded_id_token","access_token","id_token","authResponseIsValid","getSigningKeys","subscribe","jwtKeys","_this","error","oidcSecurityValidation","validateStateFromHashCallback","state","retrieve","storage_auth_state_control","authConfiguration","response_type","getPayloadFromToken","getHeaderFromToken","validate_signature_id_token","validate_id_token_nonce","storage_auth_nonce","validate_required_id_token","validate_id_token_iat_max_offset","max_id_token_iat_offset_allowed_in_seconds","validate_id_token_iss","authWellKnownEndpoints","issuer","validate_id_token_aud","client_id","validate_id_token_exp_not_expired","validate_id_token_at_hash","at_hash","successful_validation","logWarning","storage_silent_renew_running","setAuthorizationData","auto_userinfo","getUserinfo","response","trigger_authorization_result_event","onAuthorizationResult","emit","AuthorizationResult","authorized","router","navigate","startup_route","unauthorized","unauthorized_route","runTokenValidatation","OidcSecurityService","prototype","storage_id_token","Observable","observer","storage_session_state","session_state","next","complete","oidcSecurityUserService","initUserData","validate_userdata_sub_id_token","sub","userData","setUserData","storage_access_token","logoff","end_session_endpoint","id_token_hint","url","createEndSessionUrl","start_checksession","checkSessionChanged","href","auto_clean_state_after_authentication","refreshSession","Date","now","Math","random","nonce","createAuthorizeUrl","authorization_endpoint","oidcSecuritySilentRenew","startRenew","setIsAuthorized","storage_is_authorized","urlParts","authorizationUrl","params","URLSearchParams","set","redirect_url","scope","customParams","Object","assign","storage_custom_request_params","keys","forEach","key","authorizationEndsessionUrl","post_logout_redirect_uri","resetStorageData","handleError","logError","status","forbidden_route","silentRenew","onCheckSessionChanged","onWellKnownEndpointsLoaded","authWellKnownEndpointsLoaded","runGetSigningKeys","errorMessage","jwks_uri","http","get","map","extractData","catch","handleErrorGetSigningKeys","res","json","errMsg","Response","body","err","JSON","stringify","statusText","message","toString","console","throw","source","timer","timeInterval","pluck","take","_isAuthorizedValue","isTokenExpired","silent_renew_offset_in_seconds","silent_renew","decorators","type","Injectable","ctorParameters","Inject","args","PLATFORM_ID","Http","AuthConfiguration","Router","OidcSecurityCheckSession","OidcSecuritySilentRenew","OidcSecurityUserService","OidcSecurityCommon","AuthWellKnownEndpoints","propDecorators","onModuleSetup","Output","AuthModule","forRoot","token","ngModule","providers","OidcSecurityValidation","DefaultConfiguration","provide","OidcSecurityStorage","useClass","storage","BrowserStorage","forChild","NgModule","stsServer","resource","log_console_warning_active","log_console_debug_active","override_well_known_configuration","override_well_known_configuration_url","Storage","sessionStorage","OpenIDImplicitFlowConfiguration","defaultConfig","defineProperty","openIDImplicitFlowConfiguration","undefined","init","read","write","value","hasStorage","parse","getItem","setItem","oidcSecurityStorage","storage_user_data","storage_well_known_endpoints","setupModule","getAccessToken","getIdToken","warn","log","offsetSeconds","decoded","tokenExpirationDate","getTokenExpirationDate","valueOf","dataIdToken","validated","hasOwnProperty","max_offset_allowed_in_seconds","dateTime_iat_id_token","setUTCSeconds","iat","local_nonce","authWellKnownEndpoints_issuer","iss","aud","local_state","id_token_sub","userdata_sub","encode","data","encoded","urlBase64Decode","getSignatureFromToken","jwtkeys","header_data","kid","alg","isValid","_d","_e","length","publickey","KEYUTIL","getKey","KJUR","jws","JWS","verify","amountOfMatchingKeys","_i","_a","kty","use","_b","_c","config_validate_response_type","testdata","generate_at_hash","testValue","decodeURIComponent","crypto","Util","hashString","first128bits","hextob64u","date","exp","str","output","replace","atob","EventEmitter","getWellKnownEndpoints","headers","Headers","append","token_endpoint","userinfo_endpoint","check_session_iframe","revocation_endpoint","introspection_endpoint","parent","document","getElementById","empty","sessionIframe","createElement","id","style","display","src","appendChild","iframeMessageEvent","messageHandler","bind","addEventListener","create","onload","pollServerSession","clientId","contentWindow","postMessage","e","origin","initRenew","existsparent","parentdoc","Error","exists","getIdentityUserData","forbidden","platformId","oidcSecurityCheckSession","moduleSetup","_isAuthorized","BehaviorSubject","_userData","isPlatformBrowser","getUserData","asObservable","getIsAuthorized","isAuthorized","getToken","getPayloadFromIdToken","setState","getState","setCustomRequestParameters","authorize","authorizedCallback"],"mappings":"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"}
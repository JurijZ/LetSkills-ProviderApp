import { EventEmitter } from '@angular/core';
import { Http } from '@angular/http';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/catch';
import { Observable } from 'rxjs/Rx';
import { Router } from '@angular/router';
import { AuthConfiguration, OpenIDImplicitFlowConfiguration } from '../modules/auth.configuration';
import { OidcSecurityCheckSession } from './oidc.security.check-session';
import { OidcSecuritySilentRenew } from './oidc.security.silent-renew';
import { OidcSecurityUserService } from './oidc.security.user-service';
import { OidcSecurityCommon } from './oidc.security.common';
import { AuthWellKnownEndpoints } from './auth.well-known-endpoints';
import { AuthorizationResult } from './authorization-result.enum';
export declare class OidcSecurityService {
    private platformId;
    private http;
    private authConfiguration;
    private router;
    private oidcSecurityCheckSession;
    private oidcSecuritySilentRenew;
    private oidcSecurityUserService;
    private oidcSecurityCommon;
    private authWellKnownEndpoints;
    onModuleSetup: EventEmitter<any>;
    onAuthorizationResult: EventEmitter<AuthorizationResult>;
    checkSessionChanged: boolean;
    moduleSetup: boolean;
    private _isAuthorized;
    private _isAuthorizedValue;
    private _userData;
    private _userDataValue;
    private oidcSecurityValidation;
    private errorMessage;
    private jwtKeys;
    private authWellKnownEndpointsLoaded;
    constructor(platformId: Object, http: Http, authConfiguration: AuthConfiguration, router: Router, oidcSecurityCheckSession: OidcSecurityCheckSession, oidcSecuritySilentRenew: OidcSecuritySilentRenew, oidcSecurityUserService: OidcSecurityUserService, oidcSecurityCommon: OidcSecurityCommon, authWellKnownEndpoints: AuthWellKnownEndpoints);
    setupModule(openIDImplicitFlowConfiguration: OpenIDImplicitFlowConfiguration): void;
    getUserData(): Observable<any>;
    private setUserData(userData);
    getIsAuthorized(): Observable<boolean>;
    private setIsAuthorized(isAuthorized);
    getToken(): any;
    getIdToken(): any;
    getPayloadFromIdToken(encode?: boolean): any;
    setState(state: string): void;
    getState(): string;
    setCustomRequestParameters(params: {
        [key: string]: string | number | boolean;
    }): void;
    authorize(): void;
    authorizedCallback(hash?: string): void;
    getUserinfo(isRenewProcess?: boolean, result?: any, id_token?: any, decoded_id_token?: any): Observable<boolean>;
    logoff(): void;
    private successful_validation();
    private refreshSession();
    private setAuthorizationData(access_token, id_token);
    private createAuthorizeUrl(nonce, state, authorization_endpoint);
    private createEndSessionUrl(end_session_endpoint, id_token_hint);
    private resetAuthorizationData(isRenewProcess);
    handleError(error: any): void;
    private onCheckSessionChanged();
    private onWellKnownEndpointsLoaded();
    private runGetSigningKeys();
    private getSigningKeys();
    private extractData(res);
    private handleErrorGetSigningKeys(error);
    private runTokenValidatation();
}
